/**
 * Client-side symbol hash resolution
 * Matches the Rust SymbolDescriptor hashing logic for low-latency lookups
 */

// Generated symbol hash mappings using EXACT Rust protocol code
// These are generated by running: cargo run --bin generate-hashes
export const HASH_TO_SYMBOL: Record<string, string> = {
  '16842681295735137662': 'BTC-USD', // coinbase:BTC-USD
  '7334401999635196894': 'ETH-USD', // coinbase:ETH-USD
  '940696374048161387': 'SOL-USD', // coinbase:SOL-USD
  '2928176905300374322': 'LINK-USD', // coinbase:LINK-USD
  '8628902660894679173': 'AVAX-USD', // coinbase:AVAX-USD
  '12004090362538690740': 'MATIC-USD', // coinbase:MATIC-USD
  '14487283151120673288': 'ADA-USD', // coinbase:ADA-USD
  '16822674083537739063': 'DOT-USD', // coinbase:DOT-USD
  '1022169821381239205': 'BTC-USD', // kraken:BTC-USD
  '6206069765414077566': 'ETH-USD', // kraken:ETH-USD
  '11464620628871496031': 'AAPL', // alpaca:AAPL
  '8926212219213030915': 'GOOGL', // alpaca:GOOGL
  '2445527968162730613': 'MSFT', // alpaca:MSFT
  '61714251584516687': 'TSLA', // alpaca:TSLA
  '1954880188756163872': 'NVDA', // alpaca:NVDA
  '9811631298551369529': 'META', // alpaca:META
  '4060401681298886749': 'AMD', // alpaca:AMD
  '12584901168296656116': 'SPY', // alpaca:SPY
  '236566034791212307': 'QQQ', // alpaca:QQQ
  '1133320845693703200': 'AMZN', // alpaca:AMZN
};

// Map hash to exchange for Data Flow Monitor
export const HASH_TO_EXCHANGE: Record<string, string> = {
  '16842681295735137662': 'coinbase',
  '7334401999635196894': 'coinbase',
  '940696374048161387': 'coinbase',
  '2928176905300374322': 'coinbase',
  '8628902660894679173': 'coinbase',
  '12004090362538690740': 'coinbase',
  '14487283151120673288': 'coinbase',
  '16822674083537739063': 'coinbase',
  '1022169821381239205': 'kraken',
  '6206069765414077566': 'kraken',
  '11464620628871496031': 'alpaca',
  '8926212219213030915': 'alpaca',
  '2445527968162730613': 'alpaca',
  '61714251584516687': 'alpaca',
  '1954880188756163872': 'alpaca',
  '9811631298551369529': 'alpaca',
  '4060401681298886749': 'alpaca',
  '12584901168296656116': 'alpaca',
  '236566034791212307': 'alpaca',
  '1133320845693703200': 'alpaca',
};

/**
 * Resolve a symbol hash to human-readable symbol
 */
export function resolveSymbolHash(symbolHash: string | number): string | undefined {
  // Handle both string and number for compatibility
  const hashKey = typeof symbolHash === 'string' ? symbolHash : symbolHash.toString();
  return HASH_TO_SYMBOL[hashKey];
}

/**
 * Add a new symbol hash mapping (for discovered symbols)
 */
export function addSymbolMapping(symbolHash: string | number, symbol: string): void {
  // Handle both string and number for compatibility
  const hashKey = typeof symbolHash === 'string' ? symbolHash : symbolHash.toString();
  HASH_TO_SYMBOL[hashKey] = symbol;
  console.debug(`Added symbol mapping: ${hashKey} -> ${symbol}`);
}

/**
 * Get all known symbol mappings
 */
export function getAllSymbolMappings(): Record<string, string> {
  return { ...HASH_TO_SYMBOL };
}

/**
 * Check if a symbol hash is known
 */
export function isKnownSymbolHash(symbolHash: string | number): boolean {
  const hashKey = typeof symbolHash === 'string' ? symbolHash : symbolHash.toString();
  return hashKey in HASH_TO_SYMBOL;
}

/**
 * Get symbol with exchange prefix from hash
 */
export function getFullSymbol(symbolHash: string | number, exchange: string = 'coinbase'): string {
  const symbol = resolveSymbolHash(symbolHash);
  return symbol ? `${exchange}:${symbol}` : `UNKNOWN:${symbolHash}`;
}

/**
 * Get exchange name from symbol hash
 */
export function getExchangeFromHash(symbolHash: string | number): string | undefined {
  const hashKey = typeof symbolHash === 'string' ? symbolHash : symbolHash.toString();
  return HASH_TO_EXCHANGE[hashKey];
}